---
- name: Get the correct VPC
  ec2_vpc_net_facts:
    filters:
      "tag:Environment": '{{ env_type }}'
      "tag:Name": '{{ vpc_name }}'
    region: '{{ vpc_region }}'
  register: vpc

- name: Set vpc id
  set_fact:
    vpc_id: '{{ item.id }}'
  with_items: '{{ vpc.vpcs }}'
  when: item.tags.Environment == env_type 
 
- name: Gather ids for subnets
  ec2_vpc_subnet_facts:
    region: '{{ vpc_region }}'
    filters:
        vpc-id: '{{ vpc_id }}'
  register: subnet_facts

- name: Get Public subnet id
  set_fact:
    vpn_subnet: '{{ item.id }}'
  with_items: '{{ subnet_facts.subnets }}'
  when: item.tags.Name == "App"

- name: Deploy webserver
  ec2:
    region: '{{ vpc_region }}'
    key_name: '{{ ec2_key }}'
    group: '{{ item.group }}'
    instance_type: '{{ item.in_type }}'
    image: '{{ item.image }}'
    wait: yes
    wait_timeout: 500
    exact_count: '{{ item.count }}'
    count_tag: '{{ item.count_tag }}'
    instance_tags: '{{ item.tags }}'
    monitoring: '{{ item.monitoring }}'
    vpc_subnet_id: '{{ vpn_subnet }}'
    assign_public_ip: '{{ item.pub_ip }}'
  with_items: '{{ webserver }}'
  register: ec2

- debug:
    var: ec2

- name: Add DNS to server
  route53:
    state: present
    zone: '{{ internal_domain }}'
    record: "{{ env_type }}.web.{{ internal_domain }}"
    type: 'A'
    ttl: 300
    value: '{{ item.1.private_ip }}'
    wait: yes
    overwrite: true
    private_zone: true
  with_subelements:
    - '{{ ec2.results }}'
    - tagged_instances

- name: Add instance to host group
  add_host: hostname={{ item.1.private_ip }} groupname=webservers
  with_subelements:
    - '{{ ec2.results }}'
    - tagged_instances